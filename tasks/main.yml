---
- name: Set HOME var
  set_fact:
    # home_dir: "{{ ansible_env.HOME }}"
    home_dir: "~"

# - name: Set XDG_CONFIG_HOME var
#   set_fact:
#     xdg_config_dir: "{{ ansible_env.XDG_CONFIG_HOME }}"
#   when: ansible_env.XDG_CONFIG_HOME | bool

- name: Show Vars
  debug:
    msg: "{{ system_wide }}"
  tags: [never, debug]

- name: Check if git is installed
  shell: command -v git >/dev/null 2>&1
  register: is_git_exist
  ignore_errors: yes

- name: Check if unzip is installed
  shell: command -v unzip >/dev/null 2>&1
  register: is_unzip_exist
  ignore_errors: yes

  # - name: Debug
  #   ansible.builtin.debug:
  #     var: is_git_exist
  #     # verbosity: 2

  # - name: Debug
  #   ansible.builtin.debug:
  #     var: is_unzip_exist
  #     # verbosity: 2
  #   when: is_unzip_exist is failed and is_git_exist is failed

- name: Fail becouse no git or unzip avaiable
  debug:
    msg: Fail becouse no git or unzip avaiable
  failed_when: is_unzip_exist is failed and is_git_exist is failed
  when: is_unzip_exist is failed and is_git_exist is failed

- name: Check nano version
  shell: nano --version | head -n1 | cut -d' ' -f5
  register: nano_version

- name: Set repo version to 2.9
  set_fact:
    repo_version: "v2.9"
  when: nano_version.stdout | float <= 2.9

- name: Set repo version to master
  set_fact:
    repo_version: "master"
  when: nano_version.stdout | float > 2.9

- name: Check if XDG Directories are in use
  # command: test -d {{ xdg_config_dir }}
  command: test -d {{ home }}/.config
  register: xdg
  ignore_errors: yes
  when: not system_wide 

- name: Set single user installation path to XDG based
  set_fact:
    # installation_path: "{{ xdg_config_dir }}/nano/_nanorc/"
    # nano_rc_file: "{{ xdg_config_dir }}/nanorc"
    installation_path: "{{ home }}/.config/nano/_nanorc/"
    nano_rc_file: "{{ home }}/.config/nanorc"
  when: not system_wide and xdg

- name: Set single user installation path to legacy
  set_fact:
    installation_path: "{{ home_dir }}/.nano/"
    nano_rc_file: "{{ home_dir }}/.nanorc"
  when: not system_wide and not xdg

- name: Proceed with git
  include_tasks: install_via_git.yml
  when: is_git_exist is not failed and strat == 'git'

- name: Proceed with unzip
  include_tasks: install_via_unzip.yml
  when: is_unzip_exist is not failed and strat == 'zip'

- name: Create nanorc file if not exists
  become: yes
  file:
    path: /etc/nanorc
    state: touch
  when: system_wide | bool

- name: Enable installed files system wide
  become: yes
  lineinfile:
    path: /etc/nanorc
    state: present
    line: "include {{ system_wide_path }}/*.nanorc"
  when: system_wide | bool


# - name: Enable installed files
#   command: echo "include {{ installation_path }}/*.nanorc" >> {{ nano_rc_file }}
#   when: not system_wide
#   # changed_when: grep -q "include {{ installation_path }}/*.nanorc" {{ nano_rc_file }}

- name: Create nanorc file if not exists
  file:
    path: "{{ nano_rc_file }}"
    state: touch
  when: not system_wide

- name: Enable installed files
  lineinfile:
    path: "{{ nano_rc_file }}"
    state: present
    line: "include {{ installation_path }}/*.nanorc"
  when: not system_wide